🏭 What is the Factory Design Pattern?
The Factory Pattern is a creational design pattern that provides an interface for creating objects in a superclass, 
but allows subclasses to alter the type of objects that will be created.

🎯 Purpose:
To encapsulate object creation so that the code creating 
the object doesn’t need to know the exact class name or constructor details.

                [Product Interface]
                         ▲
                         |
    ┌─────────────┬─────────────┐
[ConcreteProduct1]     [ConcreteProduct2]
                        
        Created by
            ▲
            |
     [Factory Class]


🏭 What is the Abstract Factory Pattern?
The Abstract Factory Pattern is a creational pattern used to create families of related or 
dependent objects without specifying their concrete classes.

✅ Use Case:
When you want to create groups of related objects 
(like different UI kits: MacOS buttons, Windows buttons, etc.)

You want to ensure the objects in a group are used together.


💪 Benefits of Abstract Factory Pattern
1. Creates Families of Related Objects
You can create groups of objects that are meant to work together — like:
Car & Truck (Land)
Plane & Helicopter (Air)
✅ This ensures consistency between related components.


2. Decouples Client Code from Object Creation
The client (e.g. main.cpp) doesn’t need to know the class names 
ike Car, Truck, Plane, or Helicopter.
VehicleA* v1 = factory->createVehicleA();

3. Easier to Add New Product Families
Want to add Water Vehicles later (e.g. Boat and Submarine)? You just create:
WaterVehicleFactory
Boat and Submarine classes

4. Improves Code Organization
You clearly separate the interface (what to do) from the implementation (how to do it).

5. Switching Implementations Is Easy
You can switch from land to air vehicles with one line:
VehicleFactory* factory = VehicleEnvironmentFactory::getFactory("Air");



🚫 When NOT to Use It
If you're only creating 1–2 simple objects, it might be overkill.
It can make the code complex if not structured well


🧠 Real-World Examples:-
Use Case	             Abstract Factory Usage
_________________        __________________________________________________
UI toolkit	             Different buttons and menus for Windows/Mac/Linux
Game development	     Different character classes for Human/Alien species
Vehicle simulation	     Land/Air/Water vehicles
Theme/skin systems	     Light/Dark mode components