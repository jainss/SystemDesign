🔍 What is the Observer Design Pattern?
The Observer Pattern is used to build a 1-to-many dependency between objects, 
so that when one object changes state, all its dependents (observers) are automatically notified.

🔗 Real-World Analogy:
Think of YouTube channels:
A YouTube channel is the subject (publisher).
Subscribers are the observers.
When the channel posts a new video, all subscribers are notified.

✅ Benefits of the Observer Pattern
Feature	Description
🧩 Loose Coupling	
   Subjects (e.g., Product) don’t need to know details about their observers (e.g., User). They just call update() or updateFrom().
🔁 Automatic Updates	
   Observers automatically get notified of changes, which prevents manual syncing bugs.
➕ Flexible & Scalable	
   You can add new types of observers without changing the subject. You can also attach/detach observers at runtime.
🧠 Real-World Modeling	
   Mirrors real-world pub-sub behavior (e.g., users watching products, listeners waiting for events).
♻️ Reusability	
   Encourages code reuse and separation of concerns — subject logic is separate from observer logic.
🧪 Good for UI/Event Systems	
   Very useful in GUI frameworks, event-driven programming, and reactive systems.

❌ Disadvantages of the Observer Pattern
🔍 Hard to Debug	
    When many observers are registered, it can be hard to track who's updating who, especially if side effects occur.
🔄 No Control Over Notification Order	
    Notifications are sent in the order observers are stored — which may be inconsistent or problematic.
❗  Unexpected Updates	
   An update in one subject can trigger cascading notifications, leading to performance issues or bugs.
🧹 Memory Leaks	
    If observers are not properly detached, you can get dangling pointers or memory leaks, especially in raw pointer designs.
💣 Tight Coupling in Some Implementations	
   While conceptually loose-coupled, implementations that directly call observer-specific methods (like updateFrom) can introduce hidden dependencies.
🏗️ No Built-in Error Handling	
   If an observer throws during update(), the subject typically doesn't know or recover. All other observers still get called (or not).



🧠 When to Use the Observer Pattern
✅ Use It When:
Many objects need to react to changes in another object
You want to decouple publisher/subscriber logic
You're building an event-based or UI-driven system


❌ Avoid If:
The object graph is very dynamic and hard to manage
You need strict control over update timing and order
You can use modern alternatives (like signals/slots, reactive frameworks, or event buses)

💣 What is a Dangling Pointer?
A dangling pointer is a pointer that points to memory that has been deleted or deallocated.

🔥 Dangerous Outcome:
Accessing a dangling pointer causes undefined behavior, which could lead to:
Crashes 💥
Corrupted memory 🧠
Subtle, hard-to-find bugs 🐞

/*
Product* product = new Product("Laptop", 1000);
User* user = new User("Alice");

product->attach(user);

// Now delete the user
delete user;

// Product still has pointer to user — but it's now dangling!
product->setPrice(900); // 💥 crash when it tries user->update()

*/

💡 Why It Happens in Observer Pattern
In Observer Pattern (with raw pointers):
The Subject (Product) holds Observer*
But it does not own the Observer (no delete)
So if the Observer (User) is deleted manually, the Subject still holds a pointer — now invalid



✅ How to Avoid Dangling Pointers
Option 1: Use std::shared_ptr or std::weak_ptr
        This way, the Subject holds non-owning weak references.
        std::vector<std::weak_ptr<Observer>> observers;

    No memory leaks, and you can check expired() before calling update().

Option 2: Always detach() before deleting Observer
    product->detach(user);
    delete user;
  But this is manual and error-prone.

Option 3: Use lifetime-bound objects (e.g., stack-based or RAII)
    Make sure observers live as long as or longer than subjects.



✅ Summary
Dangling Pointer -	A pointer to a deleted object
Why Dangerous -	Causes undefined behavior
In Observer	- Happens when Product stores Observer* but the Observer is deleted
Fixes -	Use shared_ptr + weak_ptr, or ensure proper detach()


🔍 What is std::weak_ptr?
std::weak_ptr is a non-owning smart pointer in C++. It holds a reference to a std::shared_ptr without increasing its reference count.
In simple terms:
It lets you observe an object managed by shared_ptr, but doesn’t keep it alive.

🧠 Why Use weak_ptr?
To avoid memory leaks caused by cyclic references
To safely access an object that might be destroyed elsewhere
To prevent ownership while still monitoring an object

/*

#include <iostream>
#include <memory>

class A {
public:
    void say() { std::cout << "I'm alive!\n"; }
};

int main() {
    std::shared_ptr<A> sharedA = std::make_shared<A>();
    std::weak_ptr<A> weakA = sharedA;  // doesn't increase ref count

    if (auto ptr = weakA.lock()) {
        ptr->say();  // safe access
    }

    sharedA.reset(); // now the object is destroyed

    if (weakA.expired()) {
        std::cout << "A is gone.\n";
    }

    return 0;
}
*/

⚙️ When to Use weak_ptr
Situation	Use weak_ptr?
Multiple owners needed -	❌ Use shared_ptr
One owner, others observe - ✅ Use weak_ptr
Cyclic references (e.g., parent-child) -	✅ Use weak_ptr to break cycles

🧩 In Observer Pattern
To avoid dangling pointers:

/*
class Product {
    std::vector<std::weak_ptr<Observer>> observers;
};

Before calling update():

for (auto& wobs : observers) {
    if (auto obs = wobs.lock()) {
        obs->updateFrom(this);
    }
}

*/
This ensures you don’t crash if the observer was deleted.