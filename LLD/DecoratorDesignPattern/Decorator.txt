🔧 What is the Decorator Design Pattern? -> SOLVE Class Explosion Problem.
Definition:
The Decorator Pattern allows you to dynamically add behavior to an object without modifying its code. 
It’s a structural pattern that uses composition instead of inheritance.


✨ Benefits of Decorator Pattern
Benefit	Explanation
✅ Open/Closed Principle	You can add new functionality (like toppings or sizes) without modifying existing classes.
✅ Flexible Composition	You can combine decorators in different ways at runtime: e.g. Large Margherita + Cheese + Jalapenos.
✅ Avoids Class Explosion	Instead of making a class for every possible combination (e.g., CheeseLargeOlivePizza), you dynamically wrap them.
✅ Single Responsibility	Each decorator adds just one responsibility (e.g., size, cheese, etc.)—clear and modular.
✅ Reusability	You can reuse decorators across different objects—e.g., same Cheese for both Margherita and FarmHouse.
✅ Runtime Behavior Change	You can build pizza with any combination at runtime.



😪 Drawbacks of Decorator Pattern
Drawback	Explanation
❌ Too Many Small Classes	For every feature (e.g., cheese, olives), you create a new class. This may overwhelm the codebase.
❌ Harder Debugging	Since behavior is wrapped across multiple layers, debugging a decorator chain can be tricky.
❌ Order Matters	Applying decorators in different order may lead to different results (e.g., pricing or description).
❌ Complicated Memory Management	In C++, using raw pointers in decorators requires careful new/delete usage (or better, smart pointers).
❌ No Global View	The final object behavior is split across multiple classes — not all behavior is visible in one place.


🔁 When to Use It:

✅ Use Decorator When:
You want to add features dynamically without subclassing
You want to avoid hundreds of subclasses for every feature combo
You want to follow clean OOP principles (open/closed, SRP)

❌ Avoid Decorator If:
You only have a few fixed combinations\
Simpler inheritance or configuration would do the job
Performance or memory overhead of many layers is a concern


🍕 In Your Pizza App
✅ Good Fit	                                       ❌ Might Be a Problem
Flexible toppings and size combinations	            Many tiny classes (one for each topping/size)
Easily extendable with new toppings	                May become verbose as features grow
Dynamic combinations at runtime	                    Requires good memory management in C++